{% extends 'base.html.twig' %}

{% block title %}Home
{% endblock %}

{% block body %}

<div class="container">
    <form class="search-form">
        <input type="text" name="search-input" class="search-input" placeholder="Rechercher">
        <input text="text" style="display: none" name="min_price" id="min_price" value="{{ minPrice }}"></input>
        <input text="text" name="max_price" id="max_price" style="display: none" value="{{ maxPrice }}"></input>
        <input text="text" style="display: none" name="show_all" id="show_all"></body></html></input><input text="text" value="" style="display: none" name="show_sell" id="show_sell"></input><input text="text" value="" style="display: none" name="show_no_sell" id="show_no_sell"></input><button type="submit" class="search-button">Rechercher</button></form><div class="filter-buttons"><button class="filter-button" data-filter="show_all">Afficher tous les albums</button><button class="filter-button show_sell" data-filter="show_sell">Afficher les albums vendus</button><button class="filter-button show_no_sell" data-filter="show_no_sell">Afficher les albums non vendus</button></div><div class="price-range"><label for="min-price">Prix minimum:</label><input type="range" id="min-price" class="price-input" value="{{ minPrice }}" min="{{ valMin }}" max="{{ valMax }}" step="1"><div class="bubble" id="min-bubble"></div><label for="max-price">Prix maximum:</label><input type="range" id="max-price" class="price-input" value="{{ maxPrice }}" min=" {{ valMin }} " max=" {{ valMax }} " step=" 1"><div class="bubble" id="max-bubble"></div></div><div class="app"><div class="songs-wrapper"><div class="row">{% set t = 1 %}{% for album in albums %}<div class="col tuto s12 m6 l4 x3">
                    <div class="{{ "active song album_"~ album.id }}" data-id="{{ album.id }}">
                        <div class="mini_disk" style="text-align: center;padding-top: 100px;padding-right: 180px">
                            {% if album.getStatus == 1 %}
                                <span style="color: white;font-weight: bold;font-size: 16px">Vendu</span>
                            {% else %}
                                <span style="color: white;font-weight: bold;font-size: 16px">Disponible</span>
                            {% endif %}
                        </div>

                        <div class="menu_album" style="text-align: center;padding-top: 150px;padding-right: 20px">
                            <div class="open_modal open_modal_description" style="color: white;font-weight: bold;font-size: 16px; margin-bottom: 4px" data-description="{{ album.description }}">Lire la Description</div>
                            <div class="text_lecteur" style="color: white;font-weight: bold;font-size: 16px; margin-left: 1.6rem">
                                <a class="text_lecteur" style="color: white;" href="{{ path('app_show', {'id': album.id}) }}">
                                    Accéder au lecteur
                                    <i class='bx bxs-hand-right'></i>
                                </a>
                            </div>
                        </div>
                        <div class="song-image" style="
                                background-image: url({{ asset('uploads/'~ album.image) }});
                                "></div>
                        <div class="song-info">
                            <div class="song-title">{{ album.title }}</div>
                            <div
                                    class="song-artist">
                                <!-- Button trigger modal -->

                                <button class="make_lector play-button">

                                    {%   if albumsId != null and albumsId == album.id  %}
                                        <i class="material-icons song_icon" data-id="{{ album.id }}">pause</i>
                                    {% else %}
                                        <i class="material-icons song_icon" data-id="{{ album.id }}">
                                            play_arrow</i>

                                    {% endif %}
                                </button>

                            </div>

                        </div>
                        {% set audios = album.getInstrumentals %}

                        {% for audio in audios %}
                            <audio data-song="my song" id="{{ "audio-player_"~ t }}" data-id="{{ "audio-player_"~ t }}" class="audio-player" preload="none" src="{{ asset('audio/'~ audio.getFichierAudio) }}" data-piste="{{ t }}"></audio>
                            {% set t = t + 1 %}
                        {% endfor %}
                    </div></div>{% endfor %}</div><!-- Affichage de la pagination --><div class="pagination">{{ knp_pagination_render(albums,'pagination.html.twig') }}</div></div><div class="music-player"><div class="progress-wrapper"><div class="progress-bar"></div></div><div class="times-row"><div class="start-time">0:00</div><div class="current-song" style="font-weight: bold">{{ titleAlbum==null?"":titleAlbum }}</div><div class="end-time"></div></div><div class="player-actions"><button class="action-button"><i class="material-icons">skip_previous</i></button><button class="play-button play_btn"><i class="material-icons">play_arrow</i></button><button class="action-button"><i class="material-icons">skip_next</i></button></div></div></div><form id="choice_album_form" method="POST" action="{{ path('app_home') }}" style="display:none"><input type="text" name="album_id" id="album_id"><input type="text" name="page" id="page"></form><!-- Modal --><div class="modal fade" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="exampleModalLongTitle">Description album</h5><button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span></button></div><div class="modal-body" id="content_modal">...</div></div></div></div><button id="open_modal_btn" style="display: none" data-toggle="modal" class="open_modal_btn" data-target="#exampleModalLong"></button><style>.song {
            position: relative;
        }
        .status_album {
            position: absolute;
            bottom: 0;
            right: 9.6px;
        }
        .s12 {
            margin-right: 1rem !important;
            margin-left: 7rem !important;
        }
        .song {
            margin-left: 4rem !important;
            margin-right: 4rem !important;
            border-radius: 25rem !important;
            width: 25rem !important;
            height: 25rem !important;
            position: relative !important;
            overflow: visible;
            z-index: 99;
            background: radial-gradient(circle at 50% 120%, #81e8f6, #76deef 10%, #055194 80%, #062745 100%) !important;
            transform-style: preserve-3d;
            transform: perspective(1000px) rotateX(20deg) rotateY(10deg) rotateZ(5deg);
        }
        .music-player {
            background: url("../img/music.jpeg");
            background-repeat: no-repeat;
            background-size: 100% auto;
        }</style>{% endblock %}{% block javascripts %}{{ parent() }}<script src="https://code.jquery.com/jquery-3.6.4.js" integrity="sha256-a9jBBRygX1Bh5lt8GZjXDzyOB+bWve9EiO7tROUtj/E=" crossorigin="anonymous"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.7.0/gsap.min.js" integrity="sha512-2fk3Q4NXPYAqIha0glLZ2nluueK43aNoxvijPf53+DgL7UW9mkN+uXc1aEmnZdkkZVvtJZltpRt+JqTWc3TS3Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script><script src="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script><script>// média player
        $(document).ready(function () {
            var elementAlbum = new Object();
            var alumId = {{ albumsId==null?0:albumsId }}

            var audioPlayer
            var tabPiste = {};
            var numeroAudio = 0 // initialisation
            var progressBar = $('.progress-bar');

            if (alumId == 0) {
                $('.music-player').hide()
                $('.song').removeClass("active");
            } else {
                initialize()
            }

            $(".song_icon").on("click", function (e) {
                console.log(e.target.id)
                if (e.target.classList.contains('open_modal_btn')) {
                    $('#content_modal').empty()
                    $('#content_modal').html($(e.target).data('description'))
                    return;
                }
                if(elementAlbum.length > 0) {
                    elementAlbum.text('play_arrow')
                }
                var idAlbum = $(this).data('id')
                $('#album_id').val(idAlbum)
                elementAlbum = $('[data-id="'+idAlbum+'"].material-icons');
                elementAlbum.text('pause');
                //$('#choice_album_form').submit()
                alumId = idAlbum
                initialize()






            });
            let toggle = document.querySelector(".toggle");
            let body = document.querySelector("body");

            let tl = gsap.timeline();

            toggle.addEventListener("click", function () {
                if (body.classList.contains("open")) { // Fermer le menu.
                    body.classList.remove("open");
                    tl.to(".sep", {
                        duration: 0,
                        height: 0
                    });

                    tl.to(".sep__icon", {
                        duration: 0,
                        opacity: 0
                    });
                } else { // Ouvrir le menu.
                    body.classList.add("open");

                    tl.to(".sep", {
                        duration: 0.75,
                        height: "100%",
                        delay: 0.5
                    });

                    tl.to(".sep__icon", {
                        opacity: 1,
                        duration: 0.25,
                        delay: -0.5
                    });

                    tl.from(".menu__left__inner__item", {
                        y: 40,
                        opacity: 0,
                        stagger: 0.25
                    }, "<-0.5");

                    tl.from(".menu__right__inner__item", {
                        y: 40,
                        opacity: 0,
                        stagger: 0.25
                    }, "<0.5");
                }
            });

            function initialize() {
                $('.music-player').show('slow')
                $('.song').removeClass("active");
                // Obtenez la position de l'élément
                var position = $('.album_' + alumId).offset().top;

                // Effectuez le défilement jusqu'à la position de l'élément
                $('html, body').animate({
                    scrollTop: position
                }, 1000);
                $('.album_' + alumId).addClass("active")
                tabPiste = {}
                if (typeof audioPlayer != 'undefined') {
                    audioPlayer.pause()
                    audioPlayer.currentTime = 0
                    progressBar.width(0 + '%');
                    $('.play_btn').html('<i class="material-icons">play_arrow</i>');
                }
                var audios = $('.album_' + alumId).children('audio');
                audios.each(function (element) {
                    console.log('doule')
                    tabPiste[$(this).data('piste')] = $(this).data('id')
                })
                $.each(tabPiste, function (key, val) {
                    if (val == undefined) {
                        tabPiste.splice(key, 1)
                    }
                })

                // s'il existe des pistes
                if (tabPiste.length != 0) { // Trouver la clé la plus petite
                    var minKey = Math.min.apply(null, Object.keys(tabPiste));
                    console.log(tabPiste)
                    console.log(minKey)
                    // Récupérer l'élément audio
                    audioPlayer = $('#' + tabPiste[minKey])[0];
                    numeroAudio = minKey
                    // Récupérer les éléments DOM nécessaires

                    var startTime = $('.start-time');
                    var endTime = $('.end-time');
                    var playButton = $('.play_btn');
                    var prevButton = $('.player-actions .action-button:first');
                    var nextButton = $('.player-actions .action-button:last');
                    var currentSong = $('.current-song');
                    var progressWrapper = $('.progress-wrapper');

                    // Définir les valeurs initiales
                    var isPlaying = false;
                    var currentTime = 0;
                    var duration = audioPlayer.duration;


                    // Mise à jour de la barre de progression et du temps de lecture
                    function updateProgress() {
                        currentTime = audioPlayer.currentTime;
                        duration = audioPlayer.duration;
                        if (!isNaN(duration)) {
                            var percent = currentTime / duration * 100;
                            progressBar.width(percent + '%');
                            startTime.text(formatTime(currentTime));
                            endTime.text(formatTime(duration));
                        }
                        if (currentTime == duration) {
                            numeroAudio++
                            pause()
                            if (tabPiste.hasOwnProperty(numeroAudio)) {
                                audioPlayer = $('#' + tabPiste[numeroAudio])[0];
                                currentSong.empty()
                                currentSong.append('<span>' + $('#' + tabPiste[numeroAudio]).data('sound') + '</span>')
                                play()
                            } else {
                                numeroAudio--
                                pause()
                            }

                        }
                    }

                    // Formatage de la durée en minutes:secondes
                    function formatTime(time) {
                        var minutes = Math.floor(time / 60);
                        var seconds = Math.floor(time % 60);
                        return minutes + ':' + (
                            seconds < 10 ? '0' : ''
                        ) + seconds;
                    }

                    // Lecture de la musique
                    function play() {
                        audioPlayer.play();
                        isPlaying = true;
                        playButton.html('<i class="material-icons">pause</i>');
                    }

                    // Pause de la musique
                    function pause() {
                        audioPlayer.pause();
                        isPlaying = false;
                        playButton.html('<i class="material-icons">play_arrow</i>');
                    }

                    // Bouton play/pause
                    playButton.on('click', function () {
                        if (isPlaying) {
                            pause();
                        } else {
                            play();
                        }
                    });

                    // Bouton précédent
                    prevButton.on('click', function () {
                        numeroAudio--
                        if (tabPiste.hasOwnProperty(numeroAudio)) {
                            pause()
                            audioPlayer = $('#' + tabPiste[numeroAudio])[0];
                            play()
                        } else {
                            pause()
                            numeroAudio++
                            audioPlayer = $('#' + tabPiste[numeroAudio])[0];
                            play()
                        }
                    });

                    // Bouton suivant
                    nextButton.on('click', function () {
                        numeroAudio++
                        if (tabPiste.hasOwnProperty(numeroAudio)) {
                            pause()
                            audioPlayer = $('#' + tabPiste[numeroAudio])[0];
                            play()
                        } else {
                            pause()
                            numeroAudio--
                            audioPlayer = $('#' + tabPiste[numeroAudio])[0];
                            play()
                        }
                    });

                    // Mettre à jour la barre de progression et le temps de lecture toutes les 500 millisecondes
                    setInterval(updateProgress, 500);
                    // Ramener la chanson au début lorsque l'utilisateur clique sur la barre de progression
                    progressBar.on('click', function (e) {

                        var pos = (e.pageX - $(this).offset().left) / $(this).width();
                        audioPlayer.currentTime = pos * duration;
                    });
                    // Variables pour le déplacement de la barre de progression
                    var isDragging = false;
                    var startX = 0;
                    var dragOffset = 0;

                    // Fonction de démarrage du déplacement
                    function startDrag(e) {
                        isDragging = true;
                        startX = e.pageX;
                        dragOffset = startX - progressBar.offset().left;
                    }

                    // Fonction de déplacement de la barre de progression
                    function drag(e) {
                        if (isDragging) {
                            var pos = (e.pageX - progressBar.offset().left - dragOffset) / progressBar.width();
                            pos = Math.max(0, Math.min(1, pos)); // S'assurer que la position est entre 0 et 1
                            audioPlayer.currentTime = pos * duration;
                            updateProgress();
                        }
                    }

                    // Fonction d'arrêt du déplacement
                    function stopDrag() {
                        isDragging = false;
                    }

                    // Événements pour le déplacement de la barre de progression
                    progressBar.on('mousedown', startDrag);
                    $(document).on('mousemove', drag);
                    $(document).on('mouseup', stopDrag);

                    // Déplacer la barre de progression au clic sur progress-wrapper si une chanson est sélectionnée
                    progressWrapper.on('click', function (e) {
                        if (isSongSelected() && !isNaN(duration)) {
                            var pos = (e.pageX - $(this).offset().left) / $(this).width();
                            audioPlayer.currentTime = pos * duration;
                            updateProgress();
                        }
                    });

                    // Vérifier si une chanson est sélectionnée
                    function isSongSelected() {
                        return audioPlayer.src !== "";
                    }
                }
            }
        })
        $(document).ready(function () {
            $('.open_modal_description').on('click', function (e) {
                $('#content_modal').empty()
                $('#content_modal').html($(e.target).data('description'))
                $('.open_modal_btn').click()
            });
            // Récupérer l'URL actuelle
            var currentUrl = window.location.href;

            // Créer un objet URL à partir de l'URL actuelle
            var urlObject = new URL(currentUrl);

            // Récupérer les paramètres de requête
            var searchParams = urlObject.searchParams;

            // Récupérer des paramètres spécifiques
            var searchInput = searchParams.get('search-input');
            var minPrice = searchParams.get('min_price');
            var maxPrice = searchParams.get('max_price');
            var showAll = searchParams.get('show_all');
            var showSell = searchParams.get('show_sell');
            var showNoSell = searchParams.get('show_no_sell');
            var page  = searchParams.get('page');

            // Afficher les valeurs des paramètres
            console.log('search-input:', searchInput);
            console.log('min_price:', minPrice);
            console.log('max_price:', maxPrice);
            console.log('show_all:', showAll);
            console.log('show_sell:', showSell);
            console.log('show_no_sell:', showNoSell);
            if(showNoSell) {
                $('.show_no_sell').addClass("selected_filter")
            }
            if(showSell) {
                $('.show_sell').addClass("selected_filter")
            }
            if(searchInput) {
                $('.search-input').val(searchInput)
            }
            if(page) {
                $('#page').val(page)
            }

        });
        // ---fin média player</script>{% endblock %}
